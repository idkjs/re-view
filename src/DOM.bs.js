// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Engine$ReView = require("./Engine.bs.js");
var DomJs = require("./bindings/dom.js");

function createInstance(prim, prim$1, prim$2, prim$3) {
  return DomJs.createInstance(prim, prim$1, prim$2, prim$3);
}

function appendChild(prim, prim$1, prim$2, prim$3) {
  DomJs.appendChild(prim, prim$1, prim$2, prim$3);
  
}

function removeChild(prim, prim$1, prim$2, prim$3) {
  DomJs.removeChild(prim, prim$1, prim$2, prim$3);
  
}

function commitUpdate(prim, prim$1, prim$2, prim$3, prim$4) {
  DomJs.commitUpdate(prim, prim$1, prim$2, prim$3, prim$4);
  
}

var Reconciler = {
  createInstance: createInstance,
  appendChild: appendChild,
  removeChild: removeChild,
  commitUpdate: commitUpdate
};

var DomCore = Engine$ReView.Make(Reconciler);

var render = DomCore.Core.render;

function make(param, props) {
  return Curry._2(DomCore.Host.make, {
              key: undefined,
              ref: param.ref
            }, {
              constructor: props.tag,
              attributes: props.attributes,
              children: props.children
            });
}

var $$Element = {
  make: make
};

function make$1(value) {
  return Curry._2(DomCore.Host.make, {
              key: undefined,
              ref: undefined
            }, {
              constructor: "text",
              attributes: {
                value: value
              },
              children: []
            });
}

var $$Text = {
  make: make$1
};

function loop(time) {
  var current = performance.now();
  Curry._1(DomCore.workLoop, (function (param) {
          return current - time;
        }));
  window.requestAnimationFrame(loop);
  
}

window.requestAnimationFrame(loop);

var useCallback = DomCore.useCallback;

var useConstant = DomCore.useConstant;

var useContext = DomCore.useContext;

var useEffect = DomCore.useEffect;

var useForceUpdate = DomCore.useForceUpdate;

var useIdentifier = DomCore.useIdentifier;

var useLayoutEffect = DomCore.useLayoutEffect;

var useMemo = DomCore.useMemo;

var useMutable = DomCore.useMutable;

var useReducer = DomCore.useReducer;

var useState = DomCore.useState;

var Context;

var Fragment;

var ErrorBoundary;

var Basic;

var MemoBasic;

var Component;

var Memo;

exports.Reconciler = Reconciler;
exports.DomCore = DomCore;
exports.render = render;
exports.useCallback = useCallback;
exports.useConstant = useConstant;
exports.useContext = useContext;
exports.useEffect = useEffect;
exports.useForceUpdate = useForceUpdate;
exports.useIdentifier = useIdentifier;
exports.useLayoutEffect = useLayoutEffect;
exports.useMemo = useMemo;
exports.useMutable = useMutable;
exports.useReducer = useReducer;
exports.useState = useState;
exports.Context = Context;
exports.Fragment = Fragment;
exports.ErrorBoundary = ErrorBoundary;
exports.Basic = Basic;
exports.MemoBasic = MemoBasic;
exports.Component = Component;
exports.Memo = Memo;
exports.$$Element = $$Element;
exports.$$Text = $$Text;
exports.loop = loop;
/* DomCore Not a pure module */
